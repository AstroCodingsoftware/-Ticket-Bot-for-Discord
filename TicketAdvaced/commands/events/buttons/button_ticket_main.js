import {
    StringSelectMenuBuilder,
    ActionRowBuilder,
    StringSelectMenuOptionBuilder,
    MessageFlags,
    EmbedBuilder,
} from "discord.js";
import { log } from "../../../source/logger.js";
import settings from "../../../config.js";

export async function execute(interaction) {
    if (!interaction.isButton() || interaction.customId !== "button_ticket_main") {
        await interaction.return({ content: `${settings.emojis.alerts.error} **erro:**, \`n√£o foi possivel abrir o atendimento na a workify group.\``,});
    }
    try {
        const newEmbed = new EmbedBuilder()
            .setFields(
                {
                name: `üáßüá∑  informa√ß√£o essencial`,
                value: `> Ao abrir seu ticket, trate exclusivamente do assunto selecionado.
> Seja direto e forne√ßa detalhes relevantes.
> Sempre que poss√≠vel, anexe imagens, v√≠deos ou arquivos.
> Isso nos ajuda a resolver seu caso com mais agilidade.
> Quanto mais claro for o seu pedido, mais r√°pido conseguiremos te ajudar.`,
            },
            {
                name: `üá∫üá∏  essential information`, value: `> When opening your ticket, stick strictly to the selected topic.
> Be clear and provide relevant details, avoiding unnecessary information.
> Whenever possible, attach images, videos, or files to help clarify your request.
> This helps us resolve your issue faster.
> The clearer your request, the faster we can assist you.`
            }
        )
            .setFooter({text: `üîí Atendimento 100% confidencial e seguro.`})
            .setImage(settings.tickets_images.embedSelectOpition);

        const newSelect = new StringSelectMenuBuilder()
            .setCustomId("select_menu")
            .setPlaceholder("Escolha uma das categoria | Choose a category")
            .addOptions(
                new StringSelectMenuOptionBuilder()
                    .setValue("designs")
                    .setLabel("Solicitar Or√ßamento | Request a Quote")
                    .setEmoji({
                        id: `1386911929196482631`
                    })
                    .setDescription(" ü·¥è…¢·¥ès ‚Ä¢  ô·¥Ä…¥…¥·¥á Äs ‚Ä¢ ·¥Ä Ä·¥õ·¥ás …¢ Ä·¥ÄÃÅ“ì…™·¥Ñ·¥Äs ·¥á ·¥ç·¥ú…™·¥õ·¥è ·¥ç·¥Ä…™s!"),

                new StringSelectMenuOptionBuilder()
                    .setValue("developments")
                    .setLabel("Solicitar Or√ßamento | Request a Quote")
                    .setEmoji({
                        id: `1386912504172642325`
                    })
                    .setDescription(" ô·¥è·¥õs ‚Ä¢ s…™·¥õ·¥ás ·¥ò Ä·¥è“ì…™ss…™·¥è…¥·¥Ä…™s ‚Ä¢ s…™s·¥õ·¥á·¥ç·¥Äs ·¥áx·¥Ñ ü·¥ús…™·¥†·¥ès ·¥á·¥õ·¥Ñ."),

                new StringSelectMenuOptionBuilder()
                    .setValue("partners")
                    .setLabel("Parcerias | Partnerships")
                    .setEmoji({
                        id: `1386913517931724840`
                    })
                    .setDescription("·¥Ö·¥ás…™…¢…¥ ‚Ä¢ ·¥ç·¥è·¥Ö·¥á ü·¥Ä…¢·¥á·¥ç3·¥Ö ‚Ä¢ ·¥á·¥Ö…™·¥õ·¥è Ä·¥ás ·¥Ö·¥á ·¥†…™·¥Ö·¥á·¥è ·¥á·¥õ·¥Ñ."),
                new StringSelectMenuOptionBuilder()
                    .setValue("help")
                    .setLabel("Ajude-me | help-me")
                    .setEmoji({
                        id: `1386915201882001479`
                    })
                    .setDescription("·¥Ö·¥ú·¥†…™·¥Ö·¥Äs ‚Ä¢ ·¥Ñ·¥è·¥ç·¥ò Ä·¥Äs ‚Ä¢ ·¥Ñ·¥è·¥Ö…™…¢·¥ès ‚Ä¢ ·¥ò·¥Ä Ä·¥Ñ·¥á Ä…™·¥Äs ‚Ä¢ ·¥ò Ä·¥á·¥ä·¥á·¥õ·¥ès ·¥á·¥õ·¥Ñ"),
            );

        const actionRow = new ActionRowBuilder().addComponents(newSelect);

        await interaction.reply({
            embeds: [newEmbed],
            components: [actionRow],
            flags: MessageFlags.Ephemeral,
        });
    } catch (err) {
        log.error(err);
    }
}
